118.0999501
102.8481067
99.92259222
108.9270789
115.3087562
108.167632
123.299769
121.4131242
121.6960955
122.6991657
132.3040963
108.7406248
102.2946431
108.0013567
99.54308558
114.2358738
127.3978422
115.836892
111.7311048
108.1306502
125.5657892
107.990906
128.8037432
112.053924
105.5223539
107.7422581
97.82264432
110.6502036
94.36404242
103.5019683
123.2273889
119.3065053
126.3271523
128.4455604
109.7865799
113.3275616
86.62425344
112.1072601
116.7049018
115.6250189
117.3837
105.93476
123.6235369
130.8911927
96.26072199
112.2098751
120.3701384
109.1574213
128.5018744
105.2758273
101.1203186
101.7448654
115.555223
124.6213436
114.6803249
131.1283672
117.3499526
118.3026174
112.8001906
112.4786238
115.4101904
118.7594164
110.9404206
131.2633429
129.0155716
117.7677201
116.1265128
95.9772316
113.1717319
113.6249128
122.5553547
126.8133866
116.2759126
101.6646197
122.9602493
117.8518792
111.968768
124.0225739
116.3341571
112.6727935
105.5944917
114.0345017
118.5424267
99.87588484
133.5970772
124.0750005
121.9593132
103.445101
135.1131516
126.0261075
115.2707134
110.1845438
128.7741188
109.2807564
101.999139
112.8819152
108.792127
112.7668277
134.9180438
90.07660326
118.1523888
117.6857074
122.8348042
121.8918415
108.1457222
124.9963851
104.1424626
94.76654329
100.81175
127.5208865
109.8257241
104.1042897
129.8216245
122.282714
97.87794593
125.0300445
128.1519633
113.3521671
116.15646
146.0907488
96.20198563
108.1507656
128.5002437
117.8806136
125.213115
112.413098
120.7959331
102.5516932
107.3183256
106.9063442
115.6209983
115.1806021
112.7051758
122.7196376
113.9120513
109.9094517
126.6678674
118.3801941
133.254773
129.7014762
101.8298242
100.0242004
102.172165
127.5362242
118.5570519
113.1134018
129.6496027
104.4497713
112.5672365
117.0434867
123.4229482
117.3786336
99.64731544
119.6043455
112.7271047
116.6527616
134.1905926
112.3570009
96.02805955
115.193586
113.1724496
125.8099741
120.5657568
115.6390655
120.8725629
104.9459975
108.8421889
113.7352775
121.8172424
118.5812215
98.1606349
121.828298
131.2280484
114.0820249
110.9646725
103.9741407
105.7903521
109.5184153
122.0631393
103.7959774
116.1744976
124.9527962
111.7229945
101.7290483
115.3384376
126.2202248
117.7126707
116.6769862
124.4656792
120.2491482
121.4389481
123.5467608
114.2780224
120.9788472
112.6615669
114.4348567
119.4909071
116.1953592
115.1215941
112.9221597
112.7155661
104.2934246
123.4262886
124.5653277
115.2024369
108.2838889
104.1295056
123.4367777
123.7243633
120.809655
127.6054109
125.7350953
108.2872048
122.3353092
114.1567592
125.6284499
128.2671976
105.0888447
123.2884715
89.82008605
111.9329405
104.1610702
133.4740183
116.3619405
114.209039
137.0403804
99.27877092
104.7908636
101.4285304
122.845201
109.2656399
93.26337296
121.7296283
127.4487631
119.9046573
117.1250592
102.3512495
140.5861796
118.4048262
113.510361
112.7552368
92.53302081
104.2423947
116.2418998
103.6059753
144.666284
112.9647928
116.4887
120.9601194
117.3563228
110.0380341
112.4785699
123.7665283
103.4819301
116.6110379
120.645111
108.3620658
107.0940694
113.2233676
109.9598008
125.4915018
98.66037038
136.9577815
127.327893
118.3303124
113.2336696
125.2369205
101.413262
129.8280062
112.400932
120.5358315
113.9455271
116.5126018
111.2541872
128.1254727
108.5333763
128.2749697
103.7953129
118.1771589
109.5092959
113.7002149
139.1864614
103.5631642
109.3469033
125.2862877
126.0233162
108.4541409
119.7731596
130.2726694
110.0489093
112.1889353
117.1647433
112.7101784
97.75241491
108.4768133
99.43651754
121.9666211
128.7514129
106.3356756
125.7608954
112.2476758
137.0015323
120.1169792
117.4795071
116.0814121
124.1446656
111.4294232
107.7555808
82.81721428
126.7472453
128.2332669
123.0721173
94.77540253
134.6405947
118.9804368
114.0283962
120.4077013
121.0822921
99.68695397
106.9349944
111.4854193
102.5408294
114.7328343
105.460836
123.3035775
105.7990123
99.64033756
111.6121662
121.0595249
105.83646
116.7411452
107.9135865
115.8261087)
library(readr)
rivers <- read_csv("Downloads/rivers.csv")
View(rivers)
x=
hist(rivers$x,xlab="miles",main="histogram of American river lengths")
mean(rivers$x)
median(rivers$x)
abline(v=median(rivers$x),col=2)
rivers$x>mean(rivers$x)
sum(rivers$x>mean(rivers$x))
mean(rivers$x>mean(rivers$x))
library(readr)
birthweight <- read_csv("Downloads/birthweight.csv")
View(birthweight)
mean(birthweight)
mean(rivers$x)
View(birthweight)
hist(rivers$x,xlab="miles",main="birthweight")
library(readr)
birthweight_3 <- read_csv("Downloads/birthweight-3.csv")
View(birthweight_3)
View(birthweight)
hist(birfx,xlab=weight,main="histogram of birthweight")
hist(birthweight_3,xlab=weight,main="histogram of birthweight")
x=birthweight_3
weight$x
x=weighted.mean()
x=weight
x=(weight)
(weight$x)
birf=(1:500)
mean(birf)
birf
birf
hist(birthweight_3$x,xlab=weight,main="histogram of birthweights")
mean(105.46084
123.30358
105.79901
99.64034
111.61217
121.05952
105.83646
116.74115
107.91359
115.82611)
attach(birthweight)
attach(birthweight)
library(readr)
birthweight <- read_csv("Downloads/birthweight.csv")
View(birthweight)
attach(birthweight)
mean(wt)
median(wt)
sd(wt)
hist(wt)
m=mean(wt)
m = mean(wt)
s = sd(wt)
n = length(wt)
numvals = length(wt[ ( m-s< wt) & ( wt<m+3*s ) ] ) (numvals/n) * 100
m = 115.37
s = 10.44
n = 500
numvals = length( wt[ ( m-s < wt ) & ( wt < m+s ) ] ) (numvals/n)*100
= length( wt[ ( m-s < wt ) & ( wt < m+s ) ] ) (numvals/n)*100
length( wt[ ( m-s < wt ) & ( wt < m+s ) ] ) (numvals/n)*100
numvals =
delete.response( numvals =)
delete (numvals)
numvals = length( wt[ ( m-2*s<wt ) & ( wt<m+2*s ) ] )
(numvals/n) * 100
numvals = length( wt[ ( m-s < wt ) & ( wt < m+s ) ] )
(numvals/n) * 100
numvals = length( wt[ ( m-3*s<wt ) & ( wt<m+3*s ) ] )
(numvals/n) * 100
1-pchisq(16.81,2)
1-pchisq(2.88,1)
mean(wt)
mean(wt)
mean(wt)
attach(birthweight)
mean(wt)
median(wt)
sd(wt)
hist(wt)
m = mean(wt)
s = sd(wt)
n = length(wt)
numvals = length( wt[ ( m-s < wt ) & ( wt < m+s ) ] )
(numvals/n) * 100
numvals = length( wt[ ( m-2*s<wt ) & ( wt<m+2*s ) ] )
(numvals/n) * 100
numvals = length( wt[ ( m-3*s<wt ) & ( wt<m+3*s ) ] )
(numvals/n) * 100
attach(birthweight)
hist(wt,breaks=seq(80,150,by=5))
result=hist(wt,breaks=seq(80,150,by=5))
result
sum(result$counts*5)
result=hist(wt,breaks=seq(80,150,by=5))
sum(result$counts*5)
hist(wt,freq=F)
result$density
sum(result$density*5)
d=seq(80,150,by=1)
height=dnorm(d,mean=115,sd=10)
hist(wt,freq=F,ylim=c(0,0.045),breaks=seq(80,150,by=5))
lines(x=d,y=height)
result$density
result$density[1]
result$density[2]
result$density[1]*5+result$density[2]*5
sum(wt<90 & wt>80)/length(wt)
1-pchisq(3.8085,2)
1-pchisq(3.39,1)
setwd("~/Desktop/BIS15W2020_agalvan-master/BIS15-W20-DataScienceBiologists/lab 1")
setwd("~/Desktop/BIS15W2020_agalvan-master/BIS15W2020_agalvan")
install.packages(c("jpeg", "knitr"))
getwd()
getwd()
install.packages(c("nycflights13", "tidyverse"))
install.packages(c("nycflights13", "tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
flights
flights
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages("tidyverse")
#install.packages("nycflights13")
flights
library(nycflights13)
install.packages(c("assertthat", "BH", "boot", "class", "cluster", "codetools", "foreign", "jpeg", "KernSmooth", "lattice", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "pkgconfig", "R6", "rpart", "survival", "utf8"))
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
install.packages(c("cluster", "foreign", "jpeg", "KernSmooth", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "rpart", "survival"))
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(nycflights13)
remotes::update_packages("rlang")
:update_packages("rlang")
#update_packages("rlang")
#update_packages("rlang")
library(nycflights13)
library(nycflights13)
# update_packages("rlang")
# update_packages("rlang")
flights
library(nycflights13)
install.packages("rlang", type = "source")
install.packages("rlang", type = "source")
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(tidyverse)
install.packages(c("cluster", "foreign", "jpeg", "KernSmooth", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "rpart", "survival"))
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages("tidyverse")
#install.packages("nycflights13")
getwd()
sessionInfo()
library(nycflights13)
library(tidyverse)
library(rlang)
install.packages(c("cluster", "jpeg", "KernSmooth", "Matrix", "mgcv", "nlme"))
library(nycflights13)
library(tidyverse)
flights
options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages("tidyverse")
#install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
